name: Dependabot CI

on:
  pull_request:
    branches: [ main, develop ]
    # Only run on Dependabot PRs
    paths:
      - 'frontend/package*.json'
      - 'backend/go.mod'
      - 'backend/go.sum'
      - '.github/workflows/**'

jobs:
  # Quick validation for Dependabot PRs
  dependabot-validation:
    name: Dependabot PR Validation
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Frontend validation for npm updates
    - name: Validate Frontend Dependencies
      if: contains(github.head_ref, 'frontend') || contains(github.head_ref, 'npm_and_yarn')
      run: |
        echo "Validating frontend dependency updates..."
        cd frontend
        
        # Check if package.json is valid
        if command -v node &> /dev/null; then
          echo "Setting up Node.js environment..."
          # Use Node.js 18 for compatibility
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
        fi
        
        # Validate package.json syntax
        if node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))"; then
          echo "✅ package.json is valid JSON"
        else
          echo "❌ package.json has syntax errors"
          exit 1
        fi
        
        # Try to install dependencies
        if npm install --package-lock-only; then
          echo "✅ Dependencies can be resolved"
        else
          echo "⚠️ Some dependency conflicts, but continuing..."
        fi

    # Backend validation for Go updates  
    - name: Validate Backend Dependencies
      if: contains(github.head_ref, 'backend') || contains(github.head_ref, 'go_modules')
      run: |
        echo "Validating backend dependency updates..."
        cd backend
        
        # Set up Go
        if ! command -v go &> /dev/null; then
          echo "Installing Go..."
          wget -q https://go.dev/dl/go1.25.1.linux-amd64.tar.gz
          sudo tar -C /usr/local -xzf go1.25.1.linux-amd64.tar.gz
          export PATH=$PATH:/usr/local/go/bin
        fi
        
        # Validate go.mod syntax
        if go mod verify; then
          echo "✅ go.mod and go.sum are valid"
        else
          echo "❌ go.mod validation failed"
          exit 1
        fi
        
        # Check if dependencies can be downloaded
        if go mod download; then
          echo "✅ Dependencies can be downloaded"
        else
          echo "❌ Dependency download failed"
          exit 1
        fi

    # GitHub Actions validation
    - name: Validate GitHub Actions Updates
      if: contains(github.head_ref, 'github_actions')
      run: |
        echo "Validating GitHub Actions updates..."
        
        # Basic YAML syntax validation
        for file in .github/workflows/*.yml .github/workflows/*.yaml; do
          if [ -f "$file" ]; then
            echo "Checking $file..."
            if python3 -c "import yaml; yaml.safe_load(open('$file'))"; then
              echo "✅ $file is valid YAML"
            else
              echo "❌ $file has YAML syntax errors"
              exit 1
            fi
          fi
        done

    - name: Summary
      run: |
        echo "🎉 Dependabot PR validation completed successfully!"
        echo "This PR can be safely merged if all checks pass."

  # Auto-approve safe dependency updates
  auto-approve:
    name: Auto-approve Safe Updates
    runs-on: ubuntu-latest
    needs: dependabot-validation
    if: github.actor == 'dependabot[bot]'
    
    steps:
    - name: Check if safe to auto-approve
      id: check-safe
      run: |
        # Define patterns for safe updates
        SAFE_PATTERNS=(
          "patch"
          "minor"
          "@types/"
          "@radix-ui/"
          "eslint"
          "prettier"
          "typescript"
          "vitest"
          "actions/setup-"
          "actions/checkout"
          "actions/upload-artifact"
          "actions/download-artifact"
        )
        
        PR_TITLE="${{ github.event.pull_request.title }}"
        echo "PR Title: $PR_TITLE"
        
        # Check if PR title contains safe patterns
        for pattern in "${SAFE_PATTERNS[@]}"; do
          if [[ "$PR_TITLE" == *"$pattern"* ]]; then
            echo "✅ Safe pattern detected: $pattern"
            echo "safe=true" >> $GITHUB_OUTPUT
            exit 0
          fi
        done
        
        echo "⚠️ Manual review recommended"
        echo "safe=false" >> $GITHUB_OUTPUT

    - name: Auto-approve safe updates
      if: steps.check-safe.outputs.safe == 'true'
      run: |
        echo "This PR contains safe dependency updates that can be auto-approved."
        echo "Consider enabling auto-merge for Dependabot PRs in repository settings."