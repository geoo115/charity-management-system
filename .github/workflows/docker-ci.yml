name: Docker Build & Deploy

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
    # Skip Docker builds for Dependabot PRs
    types: [opened, synchronize, reopened]

env:
  DOCKER_REGISTRY: ghcr.io
  BACKEND_IMAGE: ghcr.io/${{ github.repository }}/backend
  FRONTEND_IMAGE: ghcr.io/${{ github.repository }}/frontend

jobs:
  # Build Backend Docker Image
  build-backend:
    name: Build Backend Image
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write

    outputs:
      backend-image: ${{ steps.meta.outputs.tags }}
      backend-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract backend metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.BACKEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Create Backend Dockerfile
      run: |
        cat > backend/Dockerfile << 'EOF'
        # Build stage
        FROM golang:1.25-alpine AS builder
        
        # Install git and ca-certificates
        RUN apk add --no-cache git ca-certificates tzdata
        
        # Create non-root user
        RUN adduser -D -s /bin/sh -u 1000 appuser
        
        WORKDIR /app
        
        # Copy go mod files
        COPY go.mod go.sum ./
        RUN go mod download && go mod verify
        
        # Copy source code
        COPY . .
        
        # Build the application
        RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
            -ldflags='-w -s -extldflags "-static"' \
            -o main ./cmd/api
        
        # Final stage
        FROM scratch
        
        # Copy timezone data and certificates
        COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo
        COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
        COPY --from=builder /etc/passwd /etc/passwd
        
        # Copy the binary
        COPY --from=builder /app/main /main
        
        # Use non-root user
        USER appuser
        
        # Expose port
        EXPOSE 8080
        
        # Health check
        HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
          CMD ["./main", "--health"] || exit 1
        
        # Run the binary
        ENTRYPOINT ["/main"]
        EOF

    - name: Build and push backend image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=backend
        cache-to: type=gha,mode=max,scope=backend
        platforms: linux/amd64,linux/arm64
        provenance: false

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.BACKEND_IMAGE }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-backend-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-backend-results.sarif'

  # Build Frontend Docker Image
  build-frontend:
    name: Build Frontend Image
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write

    outputs:
      frontend-image: ${{ steps.meta.outputs.tags }}
      frontend-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract frontend metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.FRONTEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Create Frontend Dockerfile
      run: |
        cat > frontend/Dockerfile << 'EOF'
        # Dependencies
        FROM node:18-alpine AS deps
        RUN apk add --no-cache libc6-compat
        WORKDIR /app
        
        # Install dependencies based on the preferred package manager
        COPY package.json package-lock.json* ./
        RUN npm ci --only=production && npm cache clean --force
        
        # Builder
        FROM node:18-alpine AS builder
        WORKDIR /app
        COPY --from=deps /app/node_modules ./node_modules
        COPY . .
        
        # Build with standalone output
        ENV NEXT_TELEMETRY_DISABLED 1
        RUN npm run build
        
        # Runner
        FROM node:18-alpine AS runner
        WORKDIR /app
        
        ENV NODE_ENV production
        ENV NEXT_TELEMETRY_DISABLED 1
        
        # Create non-root user
        RUN addgroup --system --gid 1001 nodejs
        RUN adduser --system --uid 1001 nextjs
        
        # Copy necessary files
        COPY --from=builder /app/public ./public
        COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
        COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
        
        USER nextjs
        
        EXPOSE 3000
        
        ENV PORT 3000
        ENV HOSTNAME "0.0.0.0"
        
        # Health check
        HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
          CMD node -e "require('http').get('http://localhost:3000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))" || exit 1
        
        CMD ["node", "server.js"]
        EOF

    - name: Build and push frontend image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=frontend
        cache-to: type=gha,mode=max,scope=frontend
        platforms: linux/amd64,linux/arm64
        provenance: false
        build-args: |
          NEXT_PUBLIC_API_URL=${{ github.ref == 'refs/heads/main' && 'https://api.lewisham-charity.com' || 'https://staging-api.lewisham-charity.com' }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-frontend-results.sarif'

  # Integration Testing with Docker Compose
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create integration test docker-compose
      run: |
        cat > docker-compose.test.yml << 'EOF'
        version: '3.8'
        
        services:
          postgres:
            image: postgres:15
            environment:
              POSTGRES_DB: lewisham_hub_test
              POSTGRES_USER: test_user
              POSTGRES_PASSWORD: test_pass
            ports:
              - "5432:5432"
            healthcheck:
              test: ["CMD-SHELL", "pg_isready -U test_user -d lewisham_hub_test"]
              interval: 10s
              timeout: 5s
              retries: 5
        
          redis:
            image: redis:7-alpine
            ports:
              - "6379:6379"
            healthcheck:
              test: ["CMD", "redis-cli", "ping"]
              interval: 10s
              timeout: 5s
              retries: 5
        
          backend:
            image: BACKEND_IMAGE_PLACEHOLDER
            environment:
              - DB_HOST=postgres
              - DB_PORT=5432
              - DB_USER=test_user
              - DB_PASSWORD=test_pass
              - DB_NAME=lewisham_hub_test
              - REDIS_HOST=redis
              - REDIS_PORT=6379
              - JWT_SECRET=test-jwt-secret-32-characters-long-for-testing
              - PORT=8080
              - SEED_DB=true
            ports:
              - "8080:8080"
            depends_on:
              postgres:
                condition: service_healthy
              redis:
                condition: service_healthy
            healthcheck:
              test: ["CMD", "./main", "--health"]
              interval: 10s
              timeout: 5s
              retries: 5
        
          frontend:
            image: FRONTEND_IMAGE_PLACEHOLDER
            environment:
              - NEXT_PUBLIC_API_URL=http://backend:8080
            ports:
              - "3000:3000"
            depends_on:
              backend:
                condition: service_healthy
            healthcheck:
              test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
              interval: 10s
              timeout: 5s
              retries: 5
        EOF
        
        # Replace image placeholders
        sed -i "s|BACKEND_IMAGE_PLACEHOLDER|${{ env.BACKEND_IMAGE }}:${{ github.sha }}|g" docker-compose.test.yml
        sed -i "s|FRONTEND_IMAGE_PLACEHOLDER|${{ env.FRONTEND_IMAGE }}:${{ github.sha }}|g" docker-compose.test.yml

    - name: Start services
      run: |
        docker-compose -f docker-compose.test.yml up -d
        
        # Wait for services to be healthy
        echo "Waiting for services to be healthy..."
        for i in {1..60}; do
          if docker-compose -f docker-compose.test.yml ps | grep -q "Up (healthy).*Up (healthy).*Up (healthy).*Up (healthy)"; then
            echo "All services are healthy"
            break
          fi
          echo "Waiting... ($i/60)"
          sleep 5
        done

    - name: Run integration tests
      run: |
        # Test backend health
        curl -f http://localhost:8080/health || exit 1
        
        # Test frontend health
        curl -f http://localhost:3000 || exit 1
        
        # Test API endpoints
        curl -f http://localhost:8080/api/v1/health || exit 1
        
        # Test basic API functionality
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/api/v1/auth/login)
        if [ "$response" -eq 400 ] || [ "$response" -eq 422 ]; then
          echo "Auth endpoint is responding correctly"
        else
          echo "Unexpected response: $response"
          exit 1
        fi

    - name: Collect logs
      if: failure()
      run: |
        echo "=== Backend logs ==="
        docker-compose -f docker-compose.test.yml logs backend
        echo "=== Frontend logs ==="
        docker-compose -f docker-compose.test.yml logs frontend
        echo "=== Postgres logs ==="
        docker-compose -f docker-compose.test.yml logs postgres
        echo "=== Redis logs ==="
        docker-compose -f docker-compose.test.yml logs redis

    - name: Clean up
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v --remove-orphans

  # Security scanning for containers
  security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.event_name != 'pull_request'

    strategy:
      matrix:
        image: 
          - backend
          - frontend

    steps:
    - name: Run comprehensive Trivy scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ matrix.image == 'backend' && env.BACKEND_IMAGE || env.FRONTEND_IMAGE }}:${{ github.sha }}
        format: 'table'
        exit-code: '0'  # Don't fail CI on vulnerabilities
        severity: 'CRITICAL,HIGH'

    - name: Run Docker Scout scan
      uses: docker/scout-action@v1
      if: always()
      with:
        command: cves
        image: ${{ matrix.image == 'backend' && env.BACKEND_IMAGE || env.FRONTEND_IMAGE }}:${{ github.sha }}
        only-severities: critical,high
        exit-code: false

  # Generate SBOM (Software Bill of Materials)
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate Backend SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.BACKEND_IMAGE }}:${{ github.sha }}
        format: spdx-json
        artifact-name: backend-sbom.spdx.json

    - name: Generate Frontend SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
        format: spdx-json
        artifact-name: frontend-sbom.spdx.json

    - name: Upload SBOMs as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sbom-reports
        path: |
          *.spdx.json